{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/XPEventManager.js","webpack:///./src/XPRegisterTrackers.js","webpack:///./src/XPStashTracker.js","webpack:///./src/XPStream.js","webpack:///./src/XPTracker.js","webpack:///./src/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,qCAAY;AACrC,mBAAmB,mBAAO,CAAC,yDAAsB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;ACxBA,mBAAmB,mBAAO,CAAC,0CAAgB;AAC3C,aAAa,mBAAO,CAAC,qCAAY;AACjC,wBAAwB,mBAAO,CAAC,iDAAkB;;AAElD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,MAAM;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,C;;;;;;;;;;;AC1KA,mBAAmB,mBAAO,CAAC,0CAAgB;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACrEA;AAAA;AAAA,mBAAO,CAAC,oDAAqB;AACtB;AACP;AACA,C","file":"libxevent.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","var initStream = require('./XPStream');\nvar initTrackers = require('./XPRegisterTrackers');\n\nvar stream = new initStream();\nvar ostype = 1;\ninitTrackers.registerSystemTracker(stream);\nfunction sendEvent(event) {\n    var objs;\n    if(ostype == 0){\n        objs= eval(event);\n    }else{\n        objs= JSON.parse(event);\n    }\n    var innerEvent = new Event(objs.dimension, objs.xpEventId, objs.time, objs.attrsMap, objs.eventAttrsMap);\n    stream.receiveEvent(innerEvent)\n}\n\n//区分os\nfunction init(osType){\n    ostype = osType;\n}\n\nmodule.exports = {\n    newStream: stream\n};\n\n\n\n\n\n","var EventTracker = require('./XPTracker.js');\nvar stream = require('./XPStream');\nvar StashEventTracker = require('./XPStashTracker');\n\nvar isTest = 1;\n\n//根据 dimension 注册一组 tracker\nfunction registerTrackers(stream, dimension){\n    var trackers = [];\n\n     //xpanel曝光\n    var xpanel_sw_tracker = new EventTracker(\"xpanel_sw\");\n    xpanel_sw_tracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"xpanel_sw\") {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n        var jsonData = JSON.stringify(event);\n        triggerReport(\"xpanel_sw\", jsonData);\n    });\n    trackers.push(xpanel_sw_tracker);\n\n    //拉起\n    var pullup_tracker = new EventTracker(\"xpanel_pull_up\");\n    pullup_tracker.addDescriptor((event, fulfill, breaker)=>{\n        if ((event.getId() == \"xpanel_init\" || event.getId() == \"xpanel_scroll\") && event.getEventAttr(\"scroll_distance\") == 0) {\n            fulfill(event);\n        }\n    }).addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"xpanel_scroll\" && event.getEventAttr(\"scroll_distance\") > 0) {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n        var jsonData = JSON.stringify(event);\n        triggerReport(\"xpanel_pull_up\", jsonData);\n    }).addResendEventCb((event, timestamp)=>{\n            event.setTime(timestamp);\n            event.setId(\"xpanel_pull_up\");\n            return event;\n        }\n    );\n    trackers.push(pullup_tracker);\n\n    //曝光时长\n    var xpanel_sw_time_tracker = new StashEventTracker(\"xpanel_sw_time\");\n    xpanel_sw_time_tracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"xpanel_keep\") {\n            fulfill(event);\n            xpanel_sw_time_tracker.putStashEvent(\"A\", event);\n        }\n    }).addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"xpanel_release\") {\n            let duration = event.getTime() - xpanel_sw_time_tracker.getStashEvent(\"A\").getTime();\n            event.putAttr(\"time\", duration);\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n        var jsonData = JSON.stringify(event);\n        triggerReport(\"xpanel_sw_time\", jsonData);\n    }).addResendEventCb((event, timestamp)=>{\n          event.setTime(timestamp);\n          event.setId(\"xpanel_sw_time\");\n          return event;\n      }\n    );\n    trackers.push(xpanel_sw_time_tracker);\n\n    var xpanel_half_reveal_sw_tracker = new EventTracker(\"xpanel_half_reveal_sw\");\n    xpanel_half_reveal_sw_tracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"xpanel_half_sw\") {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n        var jsonData = JSON.stringify(event);\n        triggerReport(\"xpanel_sw\", jsonData);\n    });\n    trackers.push(xpanel_half_reveal_sw_tracker);\n\n    // XPanel 卡片点击\n    var xpanel_card_ck_tracker = new EventTracker(\"xpanel_card_ck\");\n    xpanel_card_ck_tracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"card_ck\") {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n         var jsonData = JSON.stringify(event);\n         triggerReport(\"xpanel_card_ck\", jsonData);\n     });\n    trackers.push(xpanel_card_ck_tracker);\n    \n    // XPanel 卡片按钮点击\n    var xpanel_button_ck_tracker = new EventTracker(\"xpanel_button_ck\");\n    xpanel_button_ck_tracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"btn_ck\") {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n        var jsonData = JSON.stringify(event);\n        triggerReport(\"xpanel_button_ck\", jsonData);\n    });\n    trackers.push(xpanel_button_ck_tracker);\n\n    // 注册整组 trackers\n    stream.registerTrackers(trackers, dimension);\n}\n\nfunction registerSystemTracker(stream){\n    var trackers = [];\n    // VC init\n    //var registerTracker  = new EventTracker(\"xevent_trackers_register\");\n    var registerTracker = new EventTracker(\"xevent_trackers_register\");\n    registerTracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"XEventSystem_VC_init\") {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n       // 注册 trackers\n       registerTrackers(stream, event.getDimension())\n    });\n    trackers.push(registerTracker);\n\n    // VC dealloc\n    var unregisterTracker  = new EventTracker(\"xevent_trackers_dealloc\");\n    unregisterTracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"XEventSystem_VC_dealloc\") {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n       // 销毁 trackers\n       stream.unregisterTracker(event.getDimension())\n    });\n    trackers.push(unregisterTracker);\n\n    // 同一个 VC ，场景(dimension)切换\n    var dimensionChangeTracker  = new EventTracker(\"xevent_dimension_change\");\n    dimensionChangeTracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"XEventSystem_dimension_change\") {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n       registerTrackers(stream, event.getDimension())\n    });\n    trackers.push(dimensionChangeTracker);\n\n    // 切换业务线至未被销毁的 VC\n    var pushVCTracker  = new EventTracker(\"xevent_push_VC\");\n    pushVCTracker.addDescriptor((event, fulfill, breaker)=>{\n        if (event.getId() == \"XEventSystem_push_VC\") {\n            fulfill(event);\n        }\n    }).addCompletion((event)=>{\n       stream.changeDimensionAndResetTrackers(event.getDimension());\n    });\n    trackers.push(pushVCTracker);\n\n    // 注册 system trackers\n    stream.registerTrackers(trackers, \"XEventSystem\");\n}\n\nmodule.exports = {\n    registerTrackers:registerTrackers,\n    registerSystemTracker:registerSystemTracker,\n};\n\nfunction triggerReport(log, jsonData) {\n    if (isTest == 1) {\n        console.log(log);\n    } else {\n        xpEventManager.triggerReport(log, jsonData);\n    }\n}","var EventTracker = require('./XPTracker.js');\nclass StashEventTracker extends EventTracker{\n    constructor(name) {\n        super(name);\n        this.stashEventMap = [];\n    }\n\n    putStashEvent(alias, event){\n        this.stashEventMap[alias] = event;\n    }\n\n    getStashEvent(alias){\n        return this.stashEventMap[alias];\n    }\n\n    receiveEvent(event) {\n        let descriptor = this.descriptions[this.index];\n        if(!descriptor){\n            return null;\n        }\n        var self = this;\n        let fulfill = function(event) {\n            self.index++;\n        };\n        let breaker = (event) => {\n            self.index = 0;\n        };\n\n        descriptor(event, fulfill, breaker);\n        \n        if (this.index >= this.descriptions.length) {\n            if (this.completion) {\n                this.completion(event);\n            }\n            this.index = 0;\n\n            //满足条件之后看有没有需要回传的事件\n            let resendEvent = this.onResendEvent(event);\n//                console.log(resendEvent.getId());\n            return resendEvent;\n        }\n        return null;\n    }\n}\n\nmodule.exports = StashEventTracker;\n","class EventStream {\n    constructor() {\n        // K 维度  V 容器(K     V   )\n        this.streams = [];\n        // 记录当前维度\n        this.currentDimension = null;\n    }\n\n    receiveEvent(event) {\n        if (event.getId().indexOf(\"XEventSystem\") == 0) {\n            let stream = this.streams[\"XEventSystem\"];\n            let systemTrackers = stream[\"trackers\"];\n            for (let tracker of systemTrackers) {\n                tracker.receiveEvent(event);\n            }\n            return;\n        }\n\n        //tracker回传的事件\n        var bufferEvents = new Array()\n        let currentStream = this.streams[this.currentDimension];\n        let currentTrackers = currentStream[\"trackers\"];\n        for (let tracker of currentTrackers) {\n            let reSendEvent = tracker.receiveEvent(event);\n            if(reSendEvent){\n                console.log(\"buffer event : \" + reSendEvent.getId());\n                bufferEvents.push(reSendEvent);\n            }\n        }\n\n        for (let bufferEvent of bufferEvents)\n        {\n            this.receiveEvent(bufferEvent);\n        }\n    }\n    \n    registerTrackers(trackers, dimension) { \n        this.currentDimension = dimension;\n        // 存放当前维度所需要的信息及 trackers\n        var trackerGroup = [];\n        trackerGroup[\"trackers\"] = trackers;\n        this.streams[dimension] = trackerGroup;\n    }\n    \n    unregisterTracker(dimension){\n        this.currentDimension = null;\n        if (this.streams[dimension]) {\n            delete this.streams[dimension];\n        }\n    }\n\n    changeDimensionAndResetTrackers(dimension) {\n        this.currentDimension = dimension;\n        let currentStream = this.streams[dimension];\n        let currentTrackers = currentStream[\"trackers\"];\n        for (let tracker of currentTrackers) {\n            tracker.reset();\n        }\n    }\n\n}\n\nmodule.exports = EventStream;\n","class EventTracker {\n    constructor(name) {\n        this.name = name;\n        this.index = 0;\n        this.descriptions = [];\n        this.completion = null;\n        this.breaker = null;\n        this.resendEventCb = null;\n    }\n    addDescriptor(descriptor) {\n        this.descriptions.push(descriptor);\n        return this;\n    }\n    addBreaker(breaker) {\n        this.breaker = breaker;\n        return this;\n    }\n    addCompletion(completion) {\n        this.completion = completion;\n        return this;\n    }\n    addResendEventCb(resendEventCb){\n        this.resendEventCb = resendEventCb;\n        return this;\n    }\n\n    reset() {\n        this.index = 0;\n    }\n\n    onResendEvent(event){\n        //构建新事件的时间戳\n        var timestamp = Date.parse(new Date());\n        if(this.resendEventCb){\n            let reSentEvent = this.resendEventCb(event, timestamp);\n            return reSentEvent;\n        }\n        return null;\n    }\n\n    receiveEvent(event) {\n        let descriptor = this.descriptions[this.index];\n        if(!descriptor){\n            return null;\n        }\n        var self = this;\n        let fulfill = function(event) {\n            self.index++;\n        };\n        let breaker = (event) => {\n            self.index = 0;\n        };\n\n//        console.log(descriptor);\n        descriptor(event, fulfill, breaker);\n        \n        if (this.index >= this.descriptions.length) {\n            if (this.completion) {\n                this.completion(event);\n            }\n            this.index = 0;\n            //满足条件之后看有没有需要回传的事件\n            let resendEvent = this.onResendEvent(event);\n            return resendEvent;\n        }\n        return null;\n    }\n}\n\nmodule.exports = EventTracker;\n","require('./XPEventManager.js');\nexport function sendEvent(e) {\n\tconsole.log(\"111\");\n}"],"sourceRoot":""}